// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Model;

namespace Model.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20190112103145_Initial1")]
    partial class Initial1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687");

            modelBuilder.Entity("Model.AAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AQuestionId");

                    b.Property<int>("AnswerId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AQuestionId");

                    b.HasIndex("AnswerId");

                    b.ToTable("AAnswers");
                });

            modelBuilder.Entity("Model.AQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("QuestionId");

                    b.ToTable("AQuestions");
                });

            modelBuilder.Entity("Model.ASegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompanyId");

                    b.Property<int>("SegmentId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("SegmentId");

                    b.ToTable("ASegments");
                });

            modelBuilder.Entity("Model.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Model.EAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnswerId");

                    b.Property<int>("EQuestionId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("EQuestionId");

                    b.ToTable("EAnswers");
                });

            modelBuilder.Entity("Model.EQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExperimentId");

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId");

                    b.HasIndex("QuestionId");

                    b.ToTable("EQuestions");
                });

            modelBuilder.Entity("Model.ESegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExperimentId");

                    b.Property<int>("SegmentId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ExperimentId");

                    b.HasIndex("SegmentId");

                    b.ToTable("ESegments");
                });

            modelBuilder.Entity("Model.Experiment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Experiments");
                });

            modelBuilder.Entity("Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime>("ProjectDate");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Model.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.Property<int>("QuestionPurposeId");

                    b.Property<int>("QuestionTypeId");

                    b.Property<int>("QuestionViewId");

                    b.Property<double>("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("QuestionPurposeId");

                    b.HasIndex("QuestionTypeId");

                    b.HasIndex("QuestionViewId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Model.QuestionPurpose", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("QuestionPurposes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Свойство"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Оценка клиента"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Сегмент"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Неиспользуемое"
                        });
                });

            modelBuilder.Entity("Model.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Вещественный"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Строковый"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Дата/Время"
                        });
                });

            modelBuilder.Entity("Model.QuestionView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("QuestionViews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Непрерывный"
                        });
                });

            modelBuilder.Entity("Model.RAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnswerId");

                    b.Property<int>("RQuestionId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("RQuestionId");

                    b.ToTable("RAnswers");
                });

            modelBuilder.Entity("Model.RQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("QuestionId");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("RQuestions");
                });

            modelBuilder.Entity("Model.RSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("SegmentId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("RSegments");
                });

            modelBuilder.Entity("Model.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<int>("ProjectId");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("Model.AAnswer", b =>
                {
                    b.HasOne("Model.AQuestion", "AQuestion")
                        .WithMany("AAnswers")
                        .HasForeignKey("AQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.AQuestion", b =>
                {
                    b.HasOne("Model.Company", "Company")
                        .WithMany("AQuestions")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.ASegment", b =>
                {
                    b.HasOne("Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Answer", b =>
                {
                    b.HasOne("Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.EAnswer", b =>
                {
                    b.HasOne("Model.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.EQuestion", "EQuestion")
                        .WithMany()
                        .HasForeignKey("EQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.EQuestion", b =>
                {
                    b.HasOne("Model.Experiment", "Experiment")
                        .WithMany("EQuestions")
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.ESegment", b =>
                {
                    b.HasOne("Model.Experiment", "Experiment")
                        .WithMany()
                        .HasForeignKey("ExperimentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Question", b =>
                {
                    b.HasOne("Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.QuestionPurpose", "QuestionPurpose")
                        .WithMany()
                        .HasForeignKey("QuestionPurposeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.QuestionView", "QuestionView")
                        .WithMany()
                        .HasForeignKey("QuestionViewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.RAnswer", b =>
                {
                    b.HasOne("Model.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Model.RQuestion", "RQuestion")
                        .WithMany("RAnswers")
                        .HasForeignKey("RQuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.RQuestion", b =>
                {
                    b.HasOne("Model.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.RSegment", b =>
                {
                    b.HasOne("Model.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Model.Segment", b =>
                {
                    b.HasOne("Model.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
